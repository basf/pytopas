# The file was automatically generated by Lark v1.1.5
__version__ = "1.1.5"

#
#
#   Lark Stand-alone Generator Tool
# ----------------------------------
# Generates a stand-alone LALR(1) parser
#
# Git:    https://github.com/erezsh/lark
# Author: Erez Shinan (erezshin@gmail.com)
#
#
#    >>> LICENSE
#
#    This tool and its generated code use a separate license from Lark,
#    and are subject to the terms of the Mozilla Public License, v. 2.0.
#    If a copy of the MPL was not distributed with this
#    file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
#    If you wish to purchase a commercial license for this tool and its
#    generated code, you may contact me via email or otherwise.
#
#    If MPL2 is incompatible with your free or open-source project,
#    contact me and we'll work it out.
#
#

from abc import ABC, abstractmethod
from collections.abc import Sequence
from types import ModuleType
from typing import (
    TypeVar, Generic, Type, Tuple, List, Dict, Iterator, Collection, Callable, Optional, FrozenSet, Any,
    Union, Iterable, IO, TYPE_CHECKING, overload,
    Pattern as REPattern, ClassVar, Set, Mapping
)


class LarkError(Exception):
    pass


class ConfigurationError(LarkError, ValueError):
    pass


def assert_config(value, options: Collection, msg='Got %r, expected one of %s'):
    if value not in options:
        raise ConfigurationError(msg % (value, options))


class GrammarError(LarkError):
    pass


class ParseError(LarkError):
    pass


class LexError(LarkError):
    pass

T = TypeVar('T')

class UnexpectedInput(LarkError):
    #--
    line: int
    column: int
    pos_in_stream = None
    state: Any
    _terminals_by_name = None

    def get_context(self, text: str, span: int=40) -> str:
        #--
        assert self.pos_in_stream is not None, self
        pos = self.pos_in_stream
        start = max(pos - span, 0)
        end = pos + span
        if not isinstance(text, bytes):
            before = text[start:pos].rsplit('\n', 1)[-1]
            after = text[pos:end].split('\n', 1)[0]
            return before + after + '\n' + ' ' * len(before.expandtabs()) + '^\n'
        else:
            before = text[start:pos].rsplit(b'\n', 1)[-1]
            after = text[pos:end].split(b'\n', 1)[0]
            return (before + after + b'\n' + b' ' * len(before.expandtabs()) + b'^\n').decode("ascii", "backslashreplace")

    def match_examples(self, parse_fn: 'Callable[[str], Tree]',
                             examples: Union[Mapping[T, Iterable[str]], Iterable[Tuple[T, Iterable[str]]]],
                             token_type_match_fallback: bool=False,
                             use_accepts: bool=True
                         ) -> Optional[T]:
        #--
        assert self.state is not None, "Not supported for this exception"

        if isinstance(examples, Mapping):
            examples = examples.items()

        candidate = (None, False)
        for i, (label, example) in enumerate(examples):
            assert not isinstance(example, str), "Expecting a list"

            for j, malformed in enumerate(example):
                try:
                    parse_fn(malformed)
                except UnexpectedInput as ut:
                    if ut.state == self.state:
                        if (
                            use_accepts
                            and isinstance(self, UnexpectedToken)
                            and isinstance(ut, UnexpectedToken)
                            and ut.accepts != self.accepts
                        ):
                            logger.debug("Different accepts with same state[%d]: %s != %s at example [%s][%s]" %
                                         (self.state, self.accepts, ut.accepts, i, j))
                            continue
                        if (
                            isinstance(self, (UnexpectedToken, UnexpectedEOF))
                            and isinstance(ut, (UnexpectedToken, UnexpectedEOF))
                        ):
                            if ut.token == self.token:  ##

                                logger.debug("Exact Match at example [%s][%s]" % (i, j))
                                return label

                            if token_type_match_fallback:
                                ##

                                if (ut.token.type == self.token.type) and not candidate[-1]:
                                    logger.debug("Token Type Fallback at example [%s][%s]" % (i, j))
                                    candidate = label, True

                        if candidate[0] is None:
                            logger.debug("Same State match at example [%s][%s]" % (i, j))
                            candidate = label, False

        return candidate[0]

    def _format_expected(self, expected):
        if self._terminals_by_name:
            d = self._terminals_by_name
            expected = [d[t_name].user_repr() if t_name in d else t_name for t_name in expected]
        return "Expected one of: \n\t* %s\n" % '\n\t* '.join(expected)


class UnexpectedEOF(ParseError, UnexpectedInput):
    #--
    expected: 'List[Token]'

    def __init__(self, expected, state=None, terminals_by_name=None):
        super(UnexpectedEOF, self).__init__()

        self.expected = expected
        self.state = state
        from .lexer import Token
        self.token = Token("<EOF>", "")  ##

        self.pos_in_stream = -1
        self.line = -1
        self.column = -1
        self._terminals_by_name = terminals_by_name


    def __str__(self):
        message = "Unexpected end-of-input. "
        message += self._format_expected(self.expected)
        return message


class UnexpectedCharacters(LexError, UnexpectedInput):
    #--

    allowed: Set[str]
    considered_tokens: Set[Any]

    def __init__(self, seq, lex_pos, line, column, allowed=None, considered_tokens=None, state=None, token_history=None,
                 terminals_by_name=None, considered_rules=None):
        super(UnexpectedCharacters, self).__init__()

        ##

        self.line = line
        self.column = column
        self.pos_in_stream = lex_pos
        self.state = state
        self._terminals_by_name = terminals_by_name

        self.allowed = allowed
        self.considered_tokens = considered_tokens
        self.considered_rules = considered_rules
        self.token_history = token_history

        if isinstance(seq, bytes):
            self.char = seq[lex_pos:lex_pos + 1].decode("ascii", "backslashreplace")
        else:
            self.char = seq[lex_pos]
        self._context = self.get_context(seq)


    def __str__(self):
        message = "No terminal matches '%s' in the current parser context, at line %d col %d" % (self.char, self.line, self.column)
        message += '\n\n' + self._context
        if self.allowed:
            message += self._format_expected(self.allowed)
        if self.token_history:
            message += '\nPrevious tokens: %s\n' % ', '.join(repr(t) for t in self.token_history)
        return message


class UnexpectedToken(ParseError, UnexpectedInput):
    #--

    expected: Set[str]
    considered_rules: Set[str]
    interactive_parser: 'InteractiveParser'

    def __init__(self, token, expected, considered_rules=None, state=None, interactive_parser=None, terminals_by_name=None, token_history=None):
        super(UnexpectedToken, self).__init__()

        ##

        self.line = getattr(token, 'line', '?')
        self.column = getattr(token, 'column', '?')
        self.pos_in_stream = getattr(token, 'start_pos', None)
        self.state = state

        self.token = token
        self.expected = expected  ##

        self._accepts = NO_VALUE
        self.considered_rules = considered_rules
        self.interactive_parser = interactive_parser
        self._terminals_by_name = terminals_by_name
        self.token_history = token_history


    @property
    def accepts(self) -> Set[str]:
        if self._accepts is NO_VALUE:
            self._accepts = self.interactive_parser and self.interactive_parser.accepts()
        return self._accepts

    def __str__(self):
        message = ("Unexpected token %r at line %s, column %s.\n%s"
                   % (self.token, self.line, self.column, self._format_expected(self.accepts or self.expected)))
        if self.token_history:
            message += "Previous tokens: %r\n" % self.token_history

        return message



class VisitError(LarkError):
    #--

    obj: 'Union[Tree, Token]'
    orig_exc: Exception

    def __init__(self, rule, obj, orig_exc):
        message = 'Error trying to process rule "%s":\n\n%s' % (rule, orig_exc)
        super(VisitError, self).__init__(message)

        self.rule = rule
        self.obj = obj
        self.orig_exc = orig_exc


class MissingVariableError(LarkError):
    pass


import sys, re
import logging

logger: logging.Logger = logging.getLogger("lark")
logger.addHandler(logging.StreamHandler())
##

##

logger.setLevel(logging.CRITICAL)


NO_VALUE = object()

T = TypeVar("T")


def classify(seq: Sequence, key: Optional[Callable] = None, value: Optional[Callable] = None) -> Dict:
    d: Dict[Any, Any] = {}
    for item in seq:
        k = key(item) if (key is not None) else item
        v = value(item) if (value is not None) else item
        if k in d:
            d[k].append(v)
        else:
            d[k] = [v]
    return d


def _deserialize(data: Any, namespace: Dict[str, Any], memo: Dict) -> Any:
    if isinstance(data, dict):
        if '__type__' in data:  ##

            class_ = namespace[data['__type__']]
            return class_.deserialize(data, memo)
        elif '@' in data:
            return memo[data['@']]
        return {key:_deserialize(value, namespace, memo) for key, value in data.items()}
    elif isinstance(data, list):
        return [_deserialize(value, namespace, memo) for value in data]
    return data


_T = TypeVar("_T", bound="Serialize")

class Serialize:
    #--

    def memo_serialize(self, types_to_memoize: List) -> Any:
        memo = SerializeMemoizer(types_to_memoize)
        return self.serialize(memo), memo.serialize()

    def serialize(self, memo = None) -> Dict[str, Any]:
        if memo and memo.in_types(self):
            return {'@': memo.memoized.get(self)}

        fields = getattr(self, '__serialize_fields__')
        res = {f: _serialize(getattr(self, f), memo) for f in fields}
        res['__type__'] = type(self).__name__
        if hasattr(self, '_serialize'):
            self._serialize(res, memo)  ##

        return res

    @classmethod
    def deserialize(cls: Type[_T], data: Dict[str, Any], memo: Dict[int, Any]) -> _T:
        namespace = getattr(cls, '__serialize_namespace__', [])
        namespace = {c.__name__:c for c in namespace}

        fields = getattr(cls, '__serialize_fields__')

        if '@' in data:
            return memo[data['@']]

        inst = cls.__new__(cls)
        for f in fields:
            try:
                setattr(inst, f, _deserialize(data[f], namespace, memo))
            except KeyError as e:
                raise KeyError("Cannot find key for class", cls, e)

        if hasattr(inst, '_deserialize'):
            inst._deserialize()  ##


        return inst


class SerializeMemoizer(Serialize):
    #--

    __serialize_fields__ = 'memoized',

    def __init__(self, types_to_memoize: List) -> None:
        self.types_to_memoize = tuple(types_to_memoize)
        self.memoized = Enumerator()

    def in_types(self, value: Serialize) -> bool:
        return isinstance(value, self.types_to_memoize)

    def serialize(self) -> Dict[int, Any]:  ##

        return _serialize(self.memoized.reversed(), None)

    @classmethod
    def deserialize(cls, data: Dict[int, Any], namespace: Dict[str, Any], memo: Dict[Any, Any]) -> Dict[int, Any]:  ##

        return _deserialize(data, namespace, memo)


try:
    import regex
    _has_regex = True
except ImportError:
    _has_regex = False

if sys.version_info >= (3, 11):
    import re._parser as sre_parse
    import re._constants as sre_constants
else:
    import sre_parse
    import sre_constants

categ_pattern = re.compile(r'\\p{[A-Za-z_]+}')

def get_regexp_width(expr: str) -> Union[Tuple[int, int], List[int]]:
    if _has_regex:
        ##

        ##

        ##

        regexp_final = re.sub(categ_pattern, 'A', expr)
    else:
        if re.search(categ_pattern, expr):
            raise ImportError('`regex` module must be installed in order to use Unicode categories.', expr)
        regexp_final = expr
    try:
        ##

        return [int(x) for x in sre_parse.parse(regexp_final).getwidth()]   ##

    except sre_constants.error:
        if not _has_regex:
            raise ValueError(expr)
        else:
            ##

            ##

            c = regex.compile(regexp_final)
            if c.match('') is None:
                ##

                return 1, int(sre_constants.MAXREPEAT)
            else:
                return 0, int(sre_constants.MAXREPEAT)


from collections import OrderedDict

class Meta:

    empty: bool
    line: int
    column: int
    start_pos: int
    end_line: int
    end_column: int
    end_pos: int
    orig_expansion: 'List[TerminalDef]'
    match_tree: bool

    def __init__(self):
        self.empty = True


_Leaf_T = TypeVar("_Leaf_T")
Branch = Union[_Leaf_T, 'Tree[_Leaf_T]']


class Tree(Generic[_Leaf_T]):
    #--

    data: str
    children: 'List[Branch[_Leaf_T]]'

    def __init__(self, data: str, children: 'List[Branch[_Leaf_T]]', meta: Optional[Meta]=None) -> None:
        self.data = data
        self.children = children
        self._meta = meta

    @property
    def meta(self) -> Meta:
        if self._meta is None:
            self._meta = Meta()
        return self._meta

    def __repr__(self):
        return 'Tree(%r, %r)' % (self.data, self.children)

    def _pretty_label(self):
        return self.data

    def _pretty(self, level, indent_str):
        yield f'{indent_str*level}{self._pretty_label()}'
        if len(self.children) == 1 and not isinstance(self.children[0], Tree):
            yield f'\t{self.children[0]}\n'
        else:
            yield '\n'
            for n in self.children:
                if isinstance(n, Tree):
                    yield from n._pretty(level+1, indent_str)
                else:
                    yield f'{indent_str*(level+1)}{n}\n'

    def pretty(self, indent_str: str='  ') -> str:
        #--
        return ''.join(self._pretty(0, indent_str))

    def __rich__(self, parent:'rich.tree.Tree'=None) -> 'rich.tree.Tree':
        #--
        return self._rich(parent)

    def _rich(self, parent):
        if parent:
            tree = parent.add(f'[bold]{self.data}[/bold]')
        else:
            import rich.tree
            tree = rich.tree.Tree(self.data)

        for c in self.children:
            if isinstance(c, Tree):
                c._rich(tree)
            else:
                tree.add(f'[green]{c}[/green]')

        return tree

    def __eq__(self, other):
        try:
            return self.data == other.data and self.children == other.children
        except AttributeError:
            return False

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self) -> int:
        return hash((self.data, tuple(self.children)))

    def iter_subtrees(self) -> 'Iterator[Tree[_Leaf_T]]':
        #--
        queue = [self]
        subtrees = OrderedDict()
        for subtree in queue:
            subtrees[id(subtree)] = subtree
            ##

            queue += [c for c in reversed(subtree.children)  ##

                      if isinstance(c, Tree) and id(c) not in subtrees]

        del queue
        return reversed(list(subtrees.values()))

    def iter_subtrees_topdown(self):
        #--
        stack = [self]
        stack_append = stack.append
        stack_pop = stack.pop
        while stack:
            node = stack_pop()
            if not isinstance(node, Tree):
                continue
            yield node
            for child in reversed(node.children):
                stack_append(child)

    def find_pred(self, pred: 'Callable[[Tree[_Leaf_T]], bool]') -> 'Iterator[Tree[_Leaf_T]]':
        #--
        return filter(pred, self.iter_subtrees())

    def find_data(self, data: str) -> 'Iterator[Tree[_Leaf_T]]':
        #--
        return self.find_pred(lambda t: t.data == data)


from functools import wraps, update_wrapper
from inspect import getmembers, getmro

_Return_T = TypeVar('_Return_T')
_Return_V = TypeVar('_Return_V')
_Leaf_T = TypeVar('_Leaf_T')
_Leaf_U = TypeVar('_Leaf_U')
_R = TypeVar('_R')
_FUNC = Callable[..., _Return_T]
_DECORATED = Union[_FUNC, type]

class _DiscardType:
    #--

    def __repr__(self):
        return "lark.visitors.Discard"

Discard = _DiscardType()

##


class _Decoratable:
    #--

    @classmethod
    def _apply_v_args(cls, visit_wrapper):
        mro = getmro(cls)
        assert mro[0] is cls
        libmembers = {name for _cls in mro[1:] for name, _ in getmembers(_cls)}
        for name, value in getmembers(cls):

            ##

            if name.startswith('_') or (name in libmembers and name not in cls.__dict__):
                continue
            if not callable(value):
                continue

            ##

            if isinstance(cls.__dict__[name], _VArgsWrapper):
                continue

            setattr(cls, name, _VArgsWrapper(cls.__dict__[name], visit_wrapper))
        return cls

    def __class_getitem__(cls, _):
        return cls


class Transformer(_Decoratable, ABC, Generic[_Leaf_T, _Return_T]):
    #--
    __visit_tokens__ = True   ##


    def __init__(self,  visit_tokens: bool=True) -> None:
        self.__visit_tokens__ = visit_tokens

    def _call_userfunc(self, tree, new_children=None):
        ##

        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            try:
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    return f.visit_wrapper(f, tree.data, children, tree.meta)
                else:
                    return f(children)
            except GrammarError:
                raise
            except Exception as e:
                raise VisitError(tree.data, tree, e)

    def _call_userfunc_token(self, token):
        try:
            f = getattr(self, token.type)
        except AttributeError:
            return self.__default_token__(token)
        else:
            try:
                return f(token)
            except GrammarError:
                raise
            except Exception as e:
                raise VisitError(token.type, token, e)

    def _transform_children(self, children):
        for c in children:
            if isinstance(c, Tree):
                res = self._transform_tree(c)
            elif self.__visit_tokens__ and isinstance(c, Token):
                res = self._call_userfunc_token(c)
            else:
                res = c

            if res is not Discard:
                yield res

    def _transform_tree(self, tree):
        children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree, children)

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        #--
        return self._transform_tree(tree)

    def __mul__(
            self: 'Transformer[_Leaf_T, Tree[_Leaf_U]]',
            other: 'Union[Transformer[_Leaf_U, _Return_V], TransformerChain[_Leaf_U, _Return_V,]]'
    ) -> 'TransformerChain[_Leaf_T, _Return_V]':
        #--
        return TransformerChain(self, other)

    def __default__(self, data, children, meta):
        #--
        return Tree(data, children, meta)

    def __default_token__(self, token):
        #--
        return token


def merge_transformers(base_transformer=None, **transformers_to_merge):
    #--
    if base_transformer is None:
        base_transformer = Transformer()
    for prefix, transformer in transformers_to_merge.items():
        for method_name in dir(transformer):
            method = getattr(transformer, method_name)
            if not callable(method):
                continue
            if method_name.startswith("_") or method_name == "transform":
                continue
            prefixed_method = prefix + "__" + method_name
            if hasattr(base_transformer, prefixed_method):
                raise AttributeError("Cannot merge: method '%s' appears more than once" % prefixed_method)

            setattr(base_transformer, prefixed_method, method)

    return base_transformer


class InlineTransformer(Transformer):   ##

    def _call_userfunc(self, tree, new_children=None):
        ##

        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            return f(*children)


class TransformerChain(Generic[_Leaf_T, _Return_T]):

    transformers: 'Tuple[Union[Transformer, TransformerChain], ...]'

    def __init__(self, *transformers: 'Union[Transformer, TransformerChain]') -> None:
        self.transformers = transformers

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        for t in self.transformers:
            tree = t.transform(tree)
        return cast(_Return_T, tree)

    def __mul__(
            self: 'TransformerChain[_Leaf_T, Tree[_Leaf_U]]',
            other: 'Union[Transformer[_Leaf_U, _Return_V], TransformerChain[_Leaf_U, _Return_V]]'
    ) -> 'TransformerChain[_Leaf_T, _Return_V]':
        return TransformerChain(*self.transformers + (other,))


class Transformer_InPlace(Transformer):
    #--
    def _transform_tree(self, tree):           ##

        return self._call_userfunc(tree)

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        for subtree in tree.iter_subtrees():
            subtree.children = list(self._transform_children(subtree.children))

        return self._transform_tree(tree)


class Transformer_NonRecursive(Transformer):
    #--

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        ##

        rev_postfix = []
        q: List[Branch[_Leaf_T]] = [tree]
        while q:
            t = q.pop()
            rev_postfix.append(t)
            if isinstance(t, Tree):
                q += t.children

        ##

        stack: List = []
        for x in reversed(rev_postfix):
            if isinstance(x, Tree):
                size = len(x.children)
                if size:
                    args = stack[-size:]
                    del stack[-size:]
                else:
                    args = []

                res = self._call_userfunc(x, args)
                if res is not Discard:
                    stack.append(res)

            elif self.__visit_tokens__ and isinstance(x, Token):
                res = self._call_userfunc_token(x)
                if res is not Discard:
                    stack.append(res)
            else:
                stack.append(x)

        result, = stack  ##

        ##

        ##

        ##

        return cast(_Return_T, result)


class Transformer_InPlaceRecursive(Transformer):
    #--
    def _transform_tree(self, tree):
        tree.children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree)


##


class VisitorBase:
    def _call_userfunc(self, tree):
        return getattr(self, tree.data, self.__default__)(tree)

    def __default__(self, tree):
        #--
        return tree

    def __class_getitem__(cls, _):
        return cls


class Visitor(VisitorBase, ABC, Generic[_Leaf_T]):
    #--

    def visit(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        for subtree in tree.iter_subtrees():
            self._call_userfunc(subtree)
        return tree

    def visit_topdown(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        for subtree in tree.iter_subtrees_topdown():
            self._call_userfunc(subtree)
        return tree


class Visitor_Recursive(VisitorBase, Generic[_Leaf_T]):
    #--

    def visit(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        for child in tree.children:
            if isinstance(child, Tree):
                self.visit(child)

        self._call_userfunc(tree)
        return tree

    def visit_topdown(self,tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        self._call_userfunc(tree)

        for child in tree.children:
            if isinstance(child, Tree):
                self.visit_topdown(child)

        return tree


class Interpreter(_Decoratable, ABC, Generic[_Leaf_T, _Return_T]):
    #--

    def visit(self, tree: Tree[_Leaf_T]) -> _Return_T:
        ##

        ##

        ##

        return self._visit_tree(tree)

    def _visit_tree(self, tree: Tree[_Leaf_T]):
        f = getattr(self, tree.data)
        wrapper = getattr(f, 'visit_wrapper', None)
        if wrapper is not None:
            return f.visit_wrapper(f, tree.data, tree.children, tree.meta)
        else:
            return f(tree)

    def visit_children(self, tree: Tree[_Leaf_T]) -> List:
        return [self._visit_tree(child) if isinstance(child, Tree) else child
                for child in tree.children]

    def __getattr__(self, name):
        return self.__default__

    def __default__(self, tree):
        return self.visit_children(tree)


_InterMethod = Callable[[Type[Interpreter], _Return_T], _R]

def visit_children_decor(func: _InterMethod) -> _InterMethod:
    #--
    @wraps(func)
    def inner(cls, tree):
        values = cls.visit_children(tree)
        return func(cls, values)
    return inner

##


def _apply_v_args(obj, visit_wrapper):
    try:
        _apply = obj._apply_v_args
    except AttributeError:
        return _VArgsWrapper(obj, visit_wrapper)
    else:
        return _apply(visit_wrapper)


class _VArgsWrapper:
    #--
    base_func: Callable

    def __init__(self, func: Callable, visit_wrapper: Callable[[Callable, str, list, Any], Any]):
        if isinstance(func, _VArgsWrapper):
            func = func.base_func
        ##

        self.base_func = func  ##

        self.visit_wrapper = visit_wrapper
        update_wrapper(self, func)

    def __call__(self, *args, **kwargs):
        return self.base_func(*args, **kwargs)

    def __get__(self, instance, owner=None):
        try:
            ##

            ##

            g = type(self.base_func).__get__
        except AttributeError:
            return self
        else:
            return _VArgsWrapper(g(self.base_func, instance, owner), self.visit_wrapper)

    def __set_name__(self, owner, name):
        try:
            f = type(self.base_func).__set_name__
        except AttributeError:
            return
        else:
            f(self.base_func, owner, name)


def _vargs_inline(f, _data, children, _meta):
    return f(*children)
def _vargs_meta_inline(f, _data, children, meta):
    return f(meta, *children)
def _vargs_meta(f, _data, children, meta):
    return f(meta, children)
def _vargs_tree(f, data, children, meta):
    return f(Tree(data, children, meta))


def v_args(inline: bool = False, meta: bool = False, tree: bool = False, wrapper: Optional[Callable] = None) -> Callable[[_DECORATED], _DECORATED]:
    #--
    if tree and (meta or inline):
        raise ValueError("Visitor functions cannot combine 'tree' with 'meta' or 'inline'.")

    func = None
    if meta:
        if inline:
            func = _vargs_meta_inline
        else:
            func = _vargs_meta
    elif inline:
        func = _vargs_inline
    elif tree:
        func = _vargs_tree

    if wrapper is not None:
        if func is not None:
            raise ValueError("Cannot use 'wrapper' along with 'tree', 'meta' or 'inline'.")
        func = wrapper

    def _visitor_args_dec(obj):
        return _apply_v_args(obj, func)
    return _visitor_args_dec



TOKEN_DEFAULT_PRIORITY = 0


class Symbol(Serialize):
    __slots__ = ('name',)

    name: str
    is_term: ClassVar[bool] = NotImplemented

    def __init__(self, name: str) -> None:
        self.name = name

    def __eq__(self, other):
        assert isinstance(other, Symbol), other
        return self.is_term == other.is_term and self.name == other.name

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash(self.name)

    def __repr__(self):
        return '%s(%r)' % (type(self).__name__, self.name)

    fullrepr = property(__repr__)

    def renamed(self, f):
        return type(self)(f(self.name))


class Terminal(Symbol):
    __serialize_fields__ = 'name', 'filter_out'

    is_term: ClassVar[bool] = True

    def __init__(self, name, filter_out=False):
        self.name = name
        self.filter_out = filter_out

    @property
    def fullrepr(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.filter_out)

    def renamed(self, f):
        return type(self)(f(self.name), self.filter_out)


class NonTerminal(Symbol):
    __serialize_fields__ = 'name',

    is_term: ClassVar[bool] = False


class RuleOptions(Serialize):
    __serialize_fields__ = 'keep_all_tokens', 'expand1', 'priority', 'template_source', 'empty_indices'

    keep_all_tokens: bool
    expand1: bool
    priority: Optional[int]
    template_source: Optional[str]
    empty_indices: Tuple[bool, ...]

    def __init__(self, keep_all_tokens: bool=False, expand1: bool=False, priority: Optional[int]=None, template_source: Optional[str]=None, empty_indices: Tuple[bool, ...]=()) -> None:
        self.keep_all_tokens = keep_all_tokens
        self.expand1 = expand1
        self.priority = priority
        self.template_source = template_source
        self.empty_indices = empty_indices

    def __repr__(self):
        return 'RuleOptions(%r, %r, %r, %r)' % (
            self.keep_all_tokens,
            self.expand1,
            self.priority,
            self.template_source
        )


class Rule(Serialize):
    #--
    __slots__ = ('origin', 'expansion', 'alias', 'options', 'order', '_hash')

    __serialize_fields__ = 'origin', 'expansion', 'order', 'alias', 'options'
    __serialize_namespace__ = Terminal, NonTerminal, RuleOptions

    def __init__(self, origin, expansion, order=0, alias=None, options=None):
        self.origin = origin
        self.expansion = expansion
        self.alias = alias
        self.order = order
        self.options = options or RuleOptions()
        self._hash = hash((self.origin, tuple(self.expansion)))

    def _deserialize(self):
        self._hash = hash((self.origin, tuple(self.expansion)))

    def __str__(self):
        return '<%s : %s>' % (self.origin.name, ' '.join(x.name for x in self.expansion))

    def __repr__(self):
        return 'Rule(%r, %r, %r, %r)' % (self.origin, self.expansion, self.alias, self.options)

    def __hash__(self):
        return self._hash

    def __eq__(self, other):
        if not isinstance(other, Rule):
            return False
        return self.origin == other.origin and self.expansion == other.expansion



from copy import copy


class Pattern(Serialize, ABC):

    value: str
    flags: Collection[str]
    raw: Optional[str]
    type: ClassVar[str]

    def __init__(self, value: str, flags: Collection[str]=(), raw: Optional[str]=None) -> None:
        self.value = value
        self.flags = frozenset(flags)
        self.raw = raw

    def __repr__(self):
        return repr(self.to_regexp())

    ##

    def __hash__(self):
        return hash((type(self), self.value, self.flags))

    def __eq__(self, other):
        return type(self) == type(other) and self.value == other.value and self.flags == other.flags

    @abstractmethod
    def to_regexp(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def min_width(self) -> int:
        raise NotImplementedError()

    @property
    @abstractmethod
    def max_width(self) -> int:
        raise NotImplementedError()

    def _get_flags(self, value):
        for f in self.flags:
            value = ('(?%s:%s)' % (f, value))
        return value


class PatternStr(Pattern):
    __serialize_fields__ = 'value', 'flags'

    type: ClassVar[str] = "str"

    def to_regexp(self) -> str:
        return self._get_flags(re.escape(self.value))

    @property
    def min_width(self) -> int:
        return len(self.value)

    @property
    def max_width(self) -> int:
        return len(self.value)


class PatternRE(Pattern):
    __serialize_fields__ = 'value', 'flags', '_width'

    type: ClassVar[str] = "re"

    def to_regexp(self) -> str:
        return self._get_flags(self.value)

    _width = None
    def _get_width(self):
        if self._width is None:
            self._width = get_regexp_width(self.to_regexp())
        return self._width

    @property
    def min_width(self) -> int:
        return self._get_width()[0]

    @property
    def max_width(self) -> int:
        return self._get_width()[1]


class TerminalDef(Serialize):
    __serialize_fields__ = 'name', 'pattern', 'priority'
    __serialize_namespace__ = PatternStr, PatternRE

    name: str
    pattern: Pattern
    priority: int

    def __init__(self, name: str, pattern: Pattern, priority: int=TOKEN_DEFAULT_PRIORITY) -> None:
        assert isinstance(pattern, Pattern), pattern
        self.name = name
        self.pattern = pattern
        self.priority = priority

    def __repr__(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.pattern)

    def user_repr(self) -> str:
        if self.name.startswith('__'): ##

            return self.pattern.raw or self.name
        else:
            return self.name

_T = TypeVar('_T', bound="Token")

class Token(str):
    #--
    __slots__ = ('type', 'start_pos', 'value', 'line', 'column', 'end_line', 'end_column', 'end_pos')

    __match_args__ = ('type', 'value')

    type: str
    start_pos: Optional[int]
    value: Any
    line: Optional[int]
    column: Optional[int]
    end_line: Optional[int]
    end_column: Optional[int]
    end_pos: Optional[int]


    @overload
    def __new__(
        cls,
        type: str,
        value: Any,
        start_pos: Optional[int]=None,
        line: Optional[int]=None,
        column: Optional[int]=None,
        end_line: Optional[int]=None,
        end_column: Optional[int]=None,
        end_pos: Optional[int]=None
    ) -> 'Token':
        ...

    @overload
    def __new__(
        cls,
        type_: str,
        value: Any,
        start_pos: Optional[int]=None,
        line: Optional[int]=None,
        column: Optional[int]=None,
        end_line: Optional[int]=None,
        end_column: Optional[int]=None,
        end_pos: Optional[int]=None
    ) -> 'Token':        ...

    def __new__(cls, *args, **kwargs):
        if "type_" in kwargs:
            warnings.warn("`type_` is deprecated use `type` instead", DeprecationWarning)

            if "type" in kwargs:
                raise TypeError("Error: using both 'type' and the deprecated 'type_' as arguments.")
            kwargs["type"] = kwargs.pop("type_")

        return cls._future_new(*args, **kwargs)


    @classmethod
    def _future_new(cls, type, value, start_pos=None, line=None, column=None, end_line=None, end_column=None, end_pos=None):
        inst = super(Token, cls).__new__(cls, value)

        inst.type = type
        inst.start_pos = start_pos
        inst.value = value
        inst.line = line
        inst.column = column
        inst.end_line = end_line
        inst.end_column = end_column
        inst.end_pos = end_pos
        return inst

    @overload
    def update(self, type: Optional[str]=None, value: Optional[Any]=None) -> 'Token':
        ...

    @overload
    def update(self, type_: Optional[str]=None, value: Optional[Any]=None) -> 'Token':
        ...

    def update(self, *args, **kwargs):
        if "type_" in kwargs:
            warnings.warn("`type_` is deprecated use `type` instead", DeprecationWarning)

            if "type" in kwargs:
                raise TypeError("Error: using both 'type' and the deprecated 'type_' as arguments.")
            kwargs["type"] = kwargs.pop("type_")

        return self._future_update(*args, **kwargs)

    def _future_update(self, type: Optional[str]=None, value: Optional[Any]=None) -> 'Token':
        return Token.new_borrow_pos(
            type if type is not None else self.type,
            value if value is not None else self.value,
            self
        )

    @classmethod
    def new_borrow_pos(cls: Type[_T], type_: str, value: Any, borrow_t: 'Token') -> _T:
        return cls(type_, value, borrow_t.start_pos, borrow_t.line, borrow_t.column, borrow_t.end_line, borrow_t.end_column, borrow_t.end_pos)

    def __reduce__(self):
        return (self.__class__, (self.type, self.value, self.start_pos, self.line, self.column))

    def __repr__(self):
        return 'Token(%r, %r)' % (self.type, self.value)

    def __deepcopy__(self, memo):
        return Token(self.type, self.value, self.start_pos, self.line, self.column)

    def __eq__(self, other):
        if isinstance(other, Token) and self.type != other.type:
            return False

        return str.__eq__(self, other)

    __hash__ = str.__hash__


class LineCounter:
    __slots__ = 'char_pos', 'line', 'column', 'line_start_pos', 'newline_char'

    def __init__(self, newline_char):
        self.newline_char = newline_char
        self.char_pos = 0
        self.line = 1
        self.column = 1
        self.line_start_pos = 0

    def __eq__(self, other):
        if not isinstance(other, LineCounter):
            return NotImplemented

        return self.char_pos == other.char_pos and self.newline_char == other.newline_char

    def feed(self, token: Token, test_newline=True):
        #--
        if test_newline:
            newlines = token.count(self.newline_char)
            if newlines:
                self.line += newlines
                self.line_start_pos = self.char_pos + token.rindex(self.newline_char) + 1

        self.char_pos += len(token)
        self.column = self.char_pos - self.line_start_pos + 1


class UnlessCallback:
    def __init__(self, scanner):
        self.scanner = scanner

    def __call__(self, t):
        res = self.scanner.match(t.value, 0)
        if res:
            _value, t.type = res
        return t


class CallChain:
    def __init__(self, callback1, callback2, cond):
        self.callback1 = callback1
        self.callback2 = callback2
        self.cond = cond

    def __call__(self, t):
        t2 = self.callback1(t)
        return self.callback2(t) if self.cond(t2) else t2


def _get_match(re_, regexp, s, flags):
    m = re_.match(regexp, s, flags)
    if m:
        return m.group(0)

def _create_unless(terminals, g_regex_flags, re_, use_bytes):
    tokens_by_type = classify(terminals, lambda t: type(t.pattern))
    assert len(tokens_by_type) <= 2, tokens_by_type.keys()
    embedded_strs = set()
    callback = {}
    for retok in tokens_by_type.get(PatternRE, []):
        unless = []
        for strtok in tokens_by_type.get(PatternStr, []):
            if strtok.priority != retok.priority:
                continue
            s = strtok.pattern.value
            if s == _get_match(re_, retok.pattern.to_regexp(), s, g_regex_flags):
                unless.append(strtok)
                if strtok.pattern.flags <= retok.pattern.flags:
                    embedded_strs.add(strtok)
        if unless:
            callback[retok.name] = UnlessCallback(Scanner(unless, g_regex_flags, re_, match_whole=True, use_bytes=use_bytes))

    new_terminals = [t for t in terminals if t not in embedded_strs]
    return new_terminals, callback


class Scanner:
    def __init__(self, terminals, g_regex_flags, re_, use_bytes, match_whole=False):
        self.terminals = terminals
        self.g_regex_flags = g_regex_flags
        self.re_ = re_
        self.use_bytes = use_bytes
        self.match_whole = match_whole

        self.allowed_types = {t.name for t in self.terminals}

        self._mres = self._build_mres(terminals, len(terminals))

    def _build_mres(self, terminals, max_size):
        ##

        ##

        ##

        postfix = '$' if self.match_whole else ''
        mres = []
        while terminals:
            pattern = u'|'.join(u'(?P<%s>%s)' % (t.name, t.pattern.to_regexp() + postfix) for t in terminals[:max_size])
            if self.use_bytes:
                pattern = pattern.encode('latin-1')
            try:
                mre = self.re_.compile(pattern, self.g_regex_flags)
            except AssertionError:  ##

                return self._build_mres(terminals, max_size//2)

            mres.append(mre)
            terminals = terminals[max_size:]
        return mres

    def match(self, text, pos):
        for mre in self._mres:
            m = mre.match(text, pos)
            if m:
                return m.group(0), m.lastgroup


def _regexp_has_newline(r: str):
    #--
    return '\n' in r or '\\n' in r or '\\s' in r or '[^' in r or ('(?s' in r and '.' in r)


class LexerState:
    #--

    __slots__ = 'text', 'line_ctr', 'last_token'

    def __init__(self, text, line_ctr=None, last_token=None):
        self.text = text
        self.line_ctr = line_ctr or LineCounter(b'\n' if isinstance(text, bytes) else '\n')
        self.last_token = last_token

    def __eq__(self, other):
        if not isinstance(other, LexerState):
            return NotImplemented

        return self.text is other.text and self.line_ctr == other.line_ctr and self.last_token == other.last_token

    def __copy__(self):
        return type(self)(self.text, copy(self.line_ctr), self.last_token)


class LexerThread:
    #--

    def __init__(self, lexer: 'Lexer', lexer_state: LexerState):
        self.lexer = lexer
        self.state = lexer_state

    @classmethod
    def from_text(cls, lexer: 'Lexer', text: str):
        return cls(lexer, LexerState(text))

    def lex(self, parser_state):
        return self.lexer.lex(self.state, parser_state)

    def __copy__(self):
        return type(self)(self.lexer, copy(self.state))

    _Token = Token


_Callback = Callable[[Token], Token]

class Lexer(ABC):
    #--
    @abstractmethod
    def lex(self, lexer_state: LexerState, parser_state: Any) -> Iterator[Token]:
        return NotImplemented

    def make_lexer_state(self, text):
        #--
        return LexerState(text)


class BasicLexer(Lexer):

    terminals: Collection[TerminalDef]
    ignore_types: FrozenSet[str]
    newline_types: FrozenSet[str]
    user_callbacks: Dict[str, _Callback]
    callback: Dict[str, _Callback]
    re: ModuleType

    def __init__(self, conf: 'LexerConf') -> None:
        terminals = list(conf.terminals)
        assert all(isinstance(t, TerminalDef) for t in terminals), terminals

        self.re = conf.re_module

        if not conf.skip_validation:
            ##

            for t in terminals:
                try:
                    self.re.compile(t.pattern.to_regexp(), conf.g_regex_flags)
                except self.re.error:
                    raise LexError("Cannot compile token %s: %s" % (t.name, t.pattern))

                if t.pattern.min_width == 0:
                    raise LexError("Lexer does not allow zero-width terminals. (%s: %s)" % (t.name, t.pattern))

            if not (set(conf.ignore) <= {t.name for t in terminals}):
                raise LexError("Ignore terminals are not defined: %s" % (set(conf.ignore) - {t.name for t in terminals}))

        ##

        self.newline_types = frozenset(t.name for t in terminals if _regexp_has_newline(t.pattern.to_regexp()))
        self.ignore_types = frozenset(conf.ignore)

        terminals.sort(key=lambda x: (-x.priority, -x.pattern.max_width, -len(x.pattern.value), x.name))
        self.terminals = terminals
        self.user_callbacks = conf.callbacks
        self.g_regex_flags = conf.g_regex_flags
        self.use_bytes = conf.use_bytes
        self.terminals_by_name = conf.terminals_by_name

        self._scanner = None

    def _build_scanner(self):
        terminals, self.callback = _create_unless(self.terminals, self.g_regex_flags, self.re, self.use_bytes)
        assert all(self.callback.values())

        for type_, f in self.user_callbacks.items():
            if type_ in self.callback:
                ##

                self.callback[type_] = CallChain(self.callback[type_], f, lambda t: t.type == type_)
            else:
                self.callback[type_] = f

        self._scanner = Scanner(terminals, self.g_regex_flags, self.re, self.use_bytes)

    @property
    def scanner(self):
        if self._scanner is None:
            self._build_scanner()
        return self._scanner

    def match(self, text, pos):
        return self.scanner.match(text, pos)

    def lex(self, state: LexerState, parser_state: Any) -> Iterator[Token]:
        with suppress(EOFError):
            while True:
                yield self.next_token(state, parser_state)

    def next_token(self, lex_state: LexerState, parser_state: Any=None) -> Token:
        line_ctr = lex_state.line_ctr
        while line_ctr.char_pos < len(lex_state.text):
            res = self.match(lex_state.text, line_ctr.char_pos)
            if not res:
                allowed = self.scanner.allowed_types - self.ignore_types
                if not allowed:
                    allowed = {"<END-OF-FILE>"}
                raise UnexpectedCharacters(lex_state.text, line_ctr.char_pos, line_ctr.line, line_ctr.column,
                                           allowed=allowed, token_history=lex_state.last_token and [lex_state.last_token],
                                           state=parser_state, terminals_by_name=self.terminals_by_name)

            value, type_ = res

            if type_ not in self.ignore_types:
                t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                line_ctr.feed(value, type_ in self.newline_types)
                t.end_line = line_ctr.line
                t.end_column = line_ctr.column
                t.end_pos = line_ctr.char_pos
                if t.type in self.callback:
                    t = self.callback[t.type](t)
                    if not isinstance(t, Token):
                        raise LexError("Callbacks must return a token (returned %r)" % t)
                lex_state.last_token = t
                return t
            else:
                if type_ in self.callback:
                    t2 = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                    self.callback[type_](t2)
                line_ctr.feed(value, type_ in self.newline_types)

        ##

        raise EOFError(self)


class ContextualLexer(Lexer):

    lexers: Dict[str, BasicLexer]
    root_lexer: BasicLexer

    def __init__(self, conf: 'LexerConf', states: Dict[str, Collection[str]], always_accept: Collection[str]=()) -> None:
        terminals = list(conf.terminals)
        terminals_by_name = conf.terminals_by_name

        trad_conf = copy(conf)
        trad_conf.terminals = terminals

        lexer_by_tokens: Dict[FrozenSet[str], BasicLexer] = {}
        self.lexers = {}
        for state, accepts in states.items():
            key = frozenset(accepts)
            try:
                lexer = lexer_by_tokens[key]
            except KeyError:
                accepts = set(accepts) | set(conf.ignore) | set(always_accept)
                lexer_conf = copy(trad_conf)
                lexer_conf.terminals = [terminals_by_name[n] for n in accepts if n in terminals_by_name]
                lexer = BasicLexer(lexer_conf)
                lexer_by_tokens[key] = lexer

            self.lexers[state] = lexer

        assert trad_conf.terminals is terminals
        self.root_lexer = BasicLexer(trad_conf)

    def lex(self, lexer_state: LexerState, parser_state: Any) -> Iterator[Token]:
        try:
            while True:
                lexer = self.lexers[parser_state.position]
                yield lexer.next_token(lexer_state, parser_state)
        except EOFError:
            pass
        except UnexpectedCharacters as e:
            ##

            ##

            try:
                last_token = lexer_state.last_token  ##

                token = self.root_lexer.next_token(lexer_state, parser_state)
                raise UnexpectedToken(token, e.allowed, state=parser_state, token_history=[last_token], terminals_by_name=self.root_lexer.terminals_by_name)
            except UnexpectedCharacters:
                raise e  ##




_ParserArgType: 'TypeAlias' = 'Literal["earley", "lalr", "cyk", "auto"]'
_LexerArgType: 'TypeAlias' = 'Union[Literal["auto", "basic", "contextual", "dynamic", "dynamic_complete"], Type[Lexer]]'
_Callback = Callable[[Token], Token]

class LexerConf(Serialize):
    __serialize_fields__ = 'terminals', 'ignore', 'g_regex_flags', 'use_bytes', 'lexer_type'
    __serialize_namespace__ = TerminalDef,

    terminals: Collection[TerminalDef]
    re_module: ModuleType
    ignore: Collection[str]
    postlex: 'Optional[PostLex]'
    callbacks: Dict[str, _Callback]
    g_regex_flags: int
    skip_validation: bool
    use_bytes: bool
    lexer_type: Optional[_LexerArgType]

    def __init__(self, terminals: Collection[TerminalDef], re_module: ModuleType, ignore: Collection[str]=(), postlex: 'Optional[PostLex]'=None, callbacks: Optional[Dict[str, _Callback]]=None, g_regex_flags: int=0, skip_validation: bool=False, use_bytes: bool=False):
        self.terminals = terminals
        self.terminals_by_name = {t.name: t for t in self.terminals}
        assert len(self.terminals) == len(self.terminals_by_name)
        self.ignore = ignore
        self.postlex = postlex
        self.callbacks = callbacks or {}
        self.g_regex_flags = g_regex_flags
        self.re_module = re_module
        self.skip_validation = skip_validation
        self.use_bytes = use_bytes
        self.lexer_type = None

    def _deserialize(self):
        self.terminals_by_name = {t.name: t for t in self.terminals}

    def __deepcopy__(self, memo=None):
        return type(self)(
            deepcopy(self.terminals, memo),
            self.re_module,
            deepcopy(self.ignore, memo),
            deepcopy(self.postlex, memo),
            deepcopy(self.callbacks, memo),
            deepcopy(self.g_regex_flags, memo),
            deepcopy(self.skip_validation, memo),
            deepcopy(self.use_bytes, memo),
        )


class ParserConf(Serialize):
    __serialize_fields__ = 'rules', 'start', 'parser_type'

    def __init__(self, rules, callbacks, start):
        assert isinstance(start, list)
        self.rules = rules
        self.callbacks = callbacks
        self.start = start

        self.parser_type = None


from functools import partial, wraps
from itertools import product


class ExpandSingleChild:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        if len(children) == 1:
            return children[0]
        else:
            return self.node_builder(children)



class PropagatePositions:
    def __init__(self, node_builder, node_filter=None):
        self.node_builder = node_builder
        self.node_filter = node_filter

    def __call__(self, children):
        res = self.node_builder(children)

        if isinstance(res, Tree):
            ##

            ##

            ##

            ##


            res_meta = res.meta

            first_meta = self._pp_get_meta(children)
            if first_meta is not None:
                if not hasattr(res_meta, 'line'):
                    ##

                    res_meta.line = getattr(first_meta, 'container_line', first_meta.line)
                    res_meta.column = getattr(first_meta, 'container_column', first_meta.column)
                    res_meta.start_pos = getattr(first_meta, 'container_start_pos', first_meta.start_pos)
                    res_meta.empty = False

                res_meta.container_line = getattr(first_meta, 'container_line', first_meta.line)
                res_meta.container_column = getattr(first_meta, 'container_column', first_meta.column)

            last_meta = self._pp_get_meta(reversed(children))
            if last_meta is not None:
                if not hasattr(res_meta, 'end_line'):
                    res_meta.end_line = getattr(last_meta, 'container_end_line', last_meta.end_line)
                    res_meta.end_column = getattr(last_meta, 'container_end_column', last_meta.end_column)
                    res_meta.end_pos = getattr(last_meta, 'container_end_pos', last_meta.end_pos)
                    res_meta.empty = False

                res_meta.container_end_line = getattr(last_meta, 'container_end_line', last_meta.end_line)
                res_meta.container_end_column = getattr(last_meta, 'container_end_column', last_meta.end_column)

        return res

    def _pp_get_meta(self, children):
        for c in children:
            if self.node_filter is not None and not self.node_filter(c):
                continue
            if isinstance(c, Tree):
                if not c.meta.empty:
                    return c.meta
            elif isinstance(c, Token):
                return c
            elif hasattr(c, '__lark_meta__'):
                return c.__lark_meta__()

def make_propagate_positions(option):
    if callable(option):
        return partial(PropagatePositions, node_filter=option)
    elif option is True:
        return PropagatePositions
    elif option is False:
        return None

    raise ConfigurationError('Invalid option for propagate_positions: %r' % option)


class ChildFilter:
    def __init__(self, to_include, append_none, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include
        self.append_none = append_none

    def __call__(self, children):
        filtered = []

        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                filtered += children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)


class ChildFilterLALR(ChildFilter):
    #--

    def __call__(self, children):
        filtered = []
        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   ##

                    filtered = children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)


class ChildFilterLALR_NoPlaceholders(ChildFilter):
    #--
    def __init__(self, to_include, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include

    def __call__(self, children):
        filtered = []
        for i, to_expand in self.to_include:
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   ##

                    filtered = children[i].children
            else:
                filtered.append(children[i])
        return self.node_builder(filtered)


def _should_expand(sym):
    return not sym.is_term and sym.name.startswith('_')


def maybe_create_child_filter(expansion, keep_all_tokens, ambiguous, _empty_indices: List[bool]):
    ##

    if _empty_indices:
        assert _empty_indices.count(False) == len(expansion)
        s = ''.join(str(int(b)) for b in _empty_indices)
        empty_indices = [len(ones) for ones in s.split('0')]
        assert len(empty_indices) == len(expansion)+1, (empty_indices, len(expansion))
    else:
        empty_indices = [0] * (len(expansion)+1)

    to_include = []
    nones_to_add = 0
    for i, sym in enumerate(expansion):
        nones_to_add += empty_indices[i]
        if keep_all_tokens or not (sym.is_term and sym.filter_out):
            to_include.append((i, _should_expand(sym), nones_to_add))
            nones_to_add = 0

    nones_to_add += empty_indices[len(expansion)]

    if _empty_indices or len(to_include) < len(expansion) or any(to_expand for i, to_expand,_ in to_include):
        if _empty_indices or ambiguous:
            return partial(ChildFilter if ambiguous else ChildFilterLALR, to_include, nones_to_add)
        else:
            ##

            return partial(ChildFilterLALR_NoPlaceholders, [(i, x) for i,x,_ in to_include])


class AmbiguousExpander:
    #--
    def __init__(self, to_expand, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class
        self.to_expand = to_expand

    def __call__(self, children):
        def _is_ambig_tree(t):
            return hasattr(t, 'data') and t.data == '_ambig'

        ##

        ##

        ##

        ##

        ambiguous = []
        for i, child in enumerate(children):
            if _is_ambig_tree(child):
                if i in self.to_expand:
                    ambiguous.append(i)

                child.expand_kids_by_data('_ambig')

        if not ambiguous:
            return self.node_builder(children)

        expand = [child.children if i in ambiguous else (child,) for i, child in enumerate(children)]
        return self.tree_class('_ambig', [self.node_builder(list(f)) for f in product(*expand)])


def maybe_create_ambiguous_expander(tree_class, expansion, keep_all_tokens):
    to_expand = [i for i, sym in enumerate(expansion)
                 if keep_all_tokens or ((not (sym.is_term and sym.filter_out)) and _should_expand(sym))]
    if to_expand:
        return partial(AmbiguousExpander, to_expand, tree_class)


class AmbiguousIntermediateExpander:
    #--

    def __init__(self, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class

    def __call__(self, children):
        def _is_iambig_tree(child):
            return hasattr(child, 'data') and child.data == '_iambig'

        def _collapse_iambig(children):
            #--

            ##

            ##

            if children and _is_iambig_tree(children[0]):
                iambig_node = children[0]
                result = []
                for grandchild in iambig_node.children:
                    collapsed = _collapse_iambig(grandchild.children)
                    if collapsed:
                        for child in collapsed:
                            child.children += children[1:]
                        result += collapsed
                    else:
                        new_tree = self.tree_class('_inter', grandchild.children + children[1:])
                        result.append(new_tree)
                return result

        collapsed = _collapse_iambig(children)
        if collapsed:
            processed_nodes = [self.node_builder(c.children) for c in collapsed]
            return self.tree_class('_ambig', processed_nodes)

        return self.node_builder(children)



def inplace_transformer(func):
    @wraps(func)
    def f(children):
        ##

        tree = Tree(func.__name__, children)
        return func(tree)
    return f


def apply_visit_wrapper(func, name, wrapper):
    if wrapper is _vargs_meta or wrapper is _vargs_meta_inline:
        raise NotImplementedError("Meta args not supported for internal transformer")

    @wraps(func)
    def f(children):
        return wrapper(func, name, children, None)
    return f


class ParseTreeBuilder:
    def __init__(self, rules, tree_class, propagate_positions=False, ambiguous=False, maybe_placeholders=False):
        self.tree_class = tree_class
        self.propagate_positions = propagate_positions
        self.ambiguous = ambiguous
        self.maybe_placeholders = maybe_placeholders

        self.rule_builders = list(self._init_builders(rules))

    def _init_builders(self, rules):
        propagate_positions = make_propagate_positions(self.propagate_positions)

        for rule in rules:
            options = rule.options
            keep_all_tokens = options.keep_all_tokens
            expand_single_child = options.expand1

            wrapper_chain = list(filter(None, [
                (expand_single_child and not rule.alias) and ExpandSingleChild,
                maybe_create_child_filter(rule.expansion, keep_all_tokens, self.ambiguous, options.empty_indices if self.maybe_placeholders else None),
                propagate_positions,
                self.ambiguous and maybe_create_ambiguous_expander(self.tree_class, rule.expansion, keep_all_tokens),
                self.ambiguous and partial(AmbiguousIntermediateExpander, self.tree_class)
            ]))

            yield rule, wrapper_chain

    def create_callback(self, transformer=None):
        callbacks = {}

        default_handler = getattr(transformer, '__default__', None)
        if default_handler:
            def default_callback(data, children):
                return default_handler(data, children, None)
        else:
            default_callback = self.tree_class

        for rule, wrapper_chain in self.rule_builders:

            user_callback_name = rule.alias or rule.options.template_source or rule.origin.name
            try:
                f = getattr(transformer, user_callback_name)
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    f = apply_visit_wrapper(f, user_callback_name, wrapper)
                elif isinstance(transformer, Transformer_InPlace):
                    f = inplace_transformer(f)
            except AttributeError:
                f = partial(default_callback, user_callback_name)

            for w in wrapper_chain:
                f = w(f)

            if rule in callbacks:
                raise GrammarError("Rule '%s' already exists" % (rule,))

            callbacks[rule] = f

        return callbacks



class LALR_Parser(Serialize):
    def __init__(self, parser_conf, debug=False):
        analysis = LALR_Analyzer(parser_conf, debug=debug)
        analysis.compute_lalr()
        callbacks = parser_conf.callbacks

        self._parse_table = analysis.parse_table
        self.parser_conf = parser_conf
        self.parser = _Parser(analysis.parse_table, callbacks, debug)

    @classmethod
    def deserialize(cls, data, memo, callbacks, debug=False):
        inst = cls.__new__(cls)
        inst._parse_table = IntParseTable.deserialize(data, memo)
        inst.parser = _Parser(inst._parse_table, callbacks, debug)
        return inst

    def serialize(self, memo: Any = None) -> Dict[str, Any]:
        return self._parse_table.serialize(memo)

    def parse_interactive(self, lexer, start):
        return self.parser.parse(lexer, start, start_interactive=True)

    def parse(self, lexer, start, on_error=None):
        try:
            return self.parser.parse(lexer, start)
        except UnexpectedInput as e:
            if on_error is None:
                raise

            while True:
                if isinstance(e, UnexpectedCharacters):
                    s = e.interactive_parser.lexer_thread.state
                    p = s.line_ctr.char_pos

                if not on_error(e):
                    raise e

                if isinstance(e, UnexpectedCharacters):
                    ##

                    if p == s.line_ctr.char_pos:
                        s.line_ctr.feed(s.text[p:p+1])

                try:
                    return e.interactive_parser.resume_parse()
                except UnexpectedToken as e2:
                    if (isinstance(e, UnexpectedToken)
                        and e.token.type == e2.token.type == '$END'
                        and e.interactive_parser == e2.interactive_parser):
                        ##

                        raise e2
                    e = e2
                except UnexpectedCharacters as e2:
                    e = e2


class ParseConf:
    __slots__ = 'parse_table', 'callbacks', 'start', 'start_state', 'end_state', 'states'

    def __init__(self, parse_table, callbacks, start):
        self.parse_table = parse_table

        self.start_state = self.parse_table.start_states[start]
        self.end_state = self.parse_table.end_states[start]
        self.states = self.parse_table.states

        self.callbacks = callbacks
        self.start = start


class ParserState:
    __slots__ = 'parse_conf', 'lexer', 'state_stack', 'value_stack'

    def __init__(self, parse_conf, lexer, state_stack=None, value_stack=None):
        self.parse_conf = parse_conf
        self.lexer = lexer
        self.state_stack = state_stack or [self.parse_conf.start_state]
        self.value_stack = value_stack or []

    @property
    def position(self):
        return self.state_stack[-1]

    ##

    def __eq__(self, other):
        if not isinstance(other, ParserState):
            return NotImplemented
        return len(self.state_stack) == len(other.state_stack) and self.position == other.position

    def __copy__(self):
        return type(self)(
            self.parse_conf,
            self.lexer, ##

            copy(self.state_stack),
            deepcopy(self.value_stack),
        )

    def copy(self):
        return copy(self)

    def feed_token(self, token, is_end=False):
        state_stack = self.state_stack
        value_stack = self.value_stack
        states = self.parse_conf.states
        end_state = self.parse_conf.end_state
        callbacks = self.parse_conf.callbacks

        while True:
            state = state_stack[-1]
            try:
                action, arg = states[state][token.type]
            except KeyError:
                expected = {s for s in states[state].keys() if s.isupper()}
                raise UnexpectedToken(token, expected, state=self, interactive_parser=None)

            assert arg != end_state

            if action is Shift:
                ##

                assert not is_end
                state_stack.append(arg)
                value_stack.append(token if token.type not in callbacks else callbacks[token.type](token))
                return
            else:
                ##

                rule = arg
                size = len(rule.expansion)
                if size:
                    s = value_stack[-size:]
                    del state_stack[-size:]
                    del value_stack[-size:]
                else:
                    s = []

                value = callbacks[rule](s)

                _action, new_state = states[state_stack[-1]][rule.origin.name]
                assert _action is Shift
                state_stack.append(new_state)
                value_stack.append(value)

                if is_end and state_stack[-1] == end_state:
                    return value_stack[-1]

class _Parser:
    def __init__(self, parse_table, callbacks, debug=False):
        self.parse_table = parse_table
        self.callbacks = callbacks
        self.debug = debug

    def parse(self, lexer, start, value_stack=None, state_stack=None, start_interactive=False):
        parse_conf = ParseConf(self.parse_table, self.callbacks, start)
        parser_state = ParserState(parse_conf, lexer, state_stack, value_stack)
        if start_interactive:
            return InteractiveParser(self, parser_state, parser_state.lexer)
        return self.parse_from_state(parser_state)


    def parse_from_state(self, state, last_token=None):
        #--
        try:
            token = last_token
            for token in state.lexer.lex(state):
                state.feed_token(token)

            end_token = Token.new_borrow_pos('$END', '', token) if token else Token('$END', '', 0, 1, 1)
            return state.feed_token(end_token, True)
        except UnexpectedInput as e:
            try:
                e.interactive_parser = InteractiveParser(self, state, state.lexer)
            except NameError:
                pass
            raise e
        except Exception as e:
            if self.debug:
                print("")
                print("STATE STACK DUMP")
                print("----------------")
                for i, s in enumerate(state.state_stack):
                    print('%d)' % i , s)
                print("")

            raise


class Action:
    def __init__(self, name):
        self.name = name
    def __str__(self):
        return self.name
    def __repr__(self):
        return str(self)

Shift = Action('Shift')
Reduce = Action('Reduce')


class ParseTable:
    def __init__(self, states, start_states, end_states):
        self.states = states
        self.start_states = start_states
        self.end_states = end_states

    def serialize(self, memo):
        tokens = Enumerator()

        states = {
            state: {tokens.get(token): ((1, arg.serialize(memo)) if action is Reduce else (0, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in self.states.items()
        }

        return {
            'tokens': tokens.reversed(),
            'states': states,
            'start_states': self.start_states,
            'end_states': self.end_states,
        }

    @classmethod
    def deserialize(cls, data, memo):
        tokens = data['tokens']
        states = {
            state: {tokens[token]: ((Reduce, Rule.deserialize(arg, memo)) if action==1 else (Shift, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in data['states'].items()
        }
        return cls(states, data['start_states'], data['end_states'])


class IntParseTable(ParseTable):

    @classmethod
    def from_ParseTable(cls, parse_table):
        enum = list(parse_table.states)
        state_to_idx = {s:i for i,s in enumerate(enum)}
        int_states = {}

        for s, la in parse_table.states.items():
            la = {k:(v[0], state_to_idx[v[1]]) if v[0] is Shift else v
                  for k,v in la.items()}
            int_states[ state_to_idx[s] ] = la


        start_states = {start:state_to_idx[s] for start, s in parse_table.start_states.items()}
        end_states = {start:state_to_idx[s] for start, s in parse_table.end_states.items()}
        return cls(int_states, start_states, end_states)



def _wrap_lexer(lexer_class):
    future_interface = getattr(lexer_class, '__future_interface__', False)
    if future_interface:
        return lexer_class
    else:
        class CustomLexerWrapper(Lexer):
            def __init__(self, lexer_conf):
                self.lexer = lexer_class(lexer_conf)
            def lex(self, lexer_state, parser_state):
                return self.lexer.lex(lexer_state.text)
        return CustomLexerWrapper


def _deserialize_parsing_frontend(data, memo, lexer_conf, callbacks, options):
    parser_conf = ParserConf.deserialize(data['parser_conf'], memo)
    cls = (options and options._plugins.get('LALR_Parser')) or LALR_Parser
    parser = cls.deserialize(data['parser'], memo, callbacks, options.debug)
    parser_conf.callbacks = callbacks
    return ParsingFrontend(lexer_conf, parser_conf, options, parser=parser)


_parser_creators: 'Dict[str, Callable[[LexerConf, Any, Any], Any]]' = {}


class ParsingFrontend(Serialize):
    __serialize_fields__ = 'lexer_conf', 'parser_conf', 'parser'

    def __init__(self, lexer_conf, parser_conf, options, parser=None):
        self.parser_conf = parser_conf
        self.lexer_conf = lexer_conf
        self.options = options

        ##

        if parser:  ##

            self.parser = parser
        else:
            create_parser = _parser_creators.get(parser_conf.parser_type)
            assert create_parser is not None, "{} is not supported in standalone mode".format(
                    parser_conf.parser_type
                )
            self.parser = create_parser(lexer_conf, parser_conf, options)

        ##

        lexer_type = lexer_conf.lexer_type
        self.skip_lexer = False
        if lexer_type in ('dynamic', 'dynamic_complete'):
            assert lexer_conf.postlex is None
            self.skip_lexer = True
            return

        try:
            create_lexer = {
                'basic': create_basic_lexer,
                'contextual': create_contextual_lexer,
            }[lexer_type]
        except KeyError:
            assert issubclass(lexer_type, Lexer), lexer_type
            self.lexer = _wrap_lexer(lexer_type)(lexer_conf)
        else:
            self.lexer = create_lexer(lexer_conf, self.parser, lexer_conf.postlex, options)

        if lexer_conf.postlex:
            self.lexer = PostLexConnector(self.lexer, lexer_conf.postlex)

    def _verify_start(self, start=None):
        if start is None:
            start_decls = self.parser_conf.start
            if len(start_decls) > 1:
                raise ConfigurationError("Lark initialized with more than 1 possible start rule. Must specify which start rule to parse", start_decls)
            start ,= start_decls
        elif start not in self.parser_conf.start:
            raise ConfigurationError("Unknown start rule %s. Must be one of %r" % (start, self.parser_conf.start))
        return start

    def _make_lexer_thread(self, text):
        cls = (self.options and self.options._plugins.get('LexerThread')) or LexerThread
        return text if self.skip_lexer else cls.from_text(self.lexer, text)

    def parse(self, text, start=None, on_error=None):
        chosen_start = self._verify_start(start)
        kw = {} if on_error is None else {'on_error': on_error}
        stream = self._make_lexer_thread(text)
        return self.parser.parse(stream, chosen_start, **kw)

    def parse_interactive(self, text=None, start=None):
        chosen_start = self._verify_start(start)
        if self.parser_conf.parser_type != 'lalr':
            raise ConfigurationError("parse_interactive() currently only works with parser='lalr' ")
        stream = self._make_lexer_thread(text)
        return self.parser.parse_interactive(stream, chosen_start)


def _validate_frontend_args(parser, lexer) -> None:
    assert_config(parser, ('lalr', 'earley', 'cyk'))
    if not isinstance(lexer, type):     ##

        expected = {
            'lalr': ('basic', 'contextual'),
            'earley': ('basic', 'dynamic', 'dynamic_complete'),
            'cyk': ('basic', ),
         }[parser]
        assert_config(lexer, expected, 'Parser %r does not support lexer %%r, expected one of %%s' % parser)


def _get_lexer_callbacks(transformer, terminals):
    result = {}
    for terminal in terminals:
        callback = getattr(transformer, terminal.name, None)
        if callback is not None:
            result[terminal.name] = callback
    return result

class PostLexConnector:
    def __init__(self, lexer, postlexer):
        self.lexer = lexer
        self.postlexer = postlexer

    def lex(self, lexer_state, parser_state):
        i = self.lexer.lex(lexer_state, parser_state)
        return self.postlexer.process(i)



def create_basic_lexer(lexer_conf, parser, postlex, options):
    cls = (options and options._plugins.get('BasicLexer')) or BasicLexer
    return cls(lexer_conf)

def create_contextual_lexer(lexer_conf, parser, postlex, options):
    cls = (options and options._plugins.get('ContextualLexer')) or ContextualLexer
    states = {idx:list(t.keys()) for idx, t in parser._parse_table.states.items()}
    always_accept = postlex.always_accept if postlex else ()
    return cls(lexer_conf, states, always_accept=always_accept)

def create_lalr_parser(lexer_conf, parser_conf, options=None):
    debug = options.debug if options else False
    cls = (options and options._plugins.get('LALR_Parser')) or LALR_Parser
    return cls(parser_conf, debug=debug)

_parser_creators['lalr'] = create_lalr_parser




class PostLex(ABC):
    @abstractmethod
    def process(self, stream: Iterator[Token]) -> Iterator[Token]:
        return stream

    always_accept: Iterable[str] = ()

class LarkOptions(Serialize):
    #--

    start: List[str]
    debug: bool
    transformer: 'Optional[Transformer]'
    propagate_positions: Union[bool, str]
    maybe_placeholders: bool
    cache: Union[bool, str]
    regex: bool
    g_regex_flags: int
    keep_all_tokens: bool
    tree_class: Any
    parser: _ParserArgType
    lexer: _LexerArgType
    ambiguity: 'Literal["auto", "resolve", "explicit", "forest"]'
    postlex: Optional[PostLex]
    priority: 'Optional[Literal["auto", "normal", "invert"]]'
    lexer_callbacks: Dict[str, Callable[[Token], Token]]
    use_bytes: bool
    edit_terminals: Optional[Callable[[TerminalDef], TerminalDef]]
    import_paths: 'List[Union[str, Callable[[Union[None, str, PackageResource], str], Tuple[str, str]]]]'
    source_path: Optional[str]

    OPTIONS_DOC = """
    **===  General Options  ===**

    start
            The start symbol. Either a string, or a list of strings for multiple possible starts (Default: "start")
    debug
            Display debug information and extra warnings. Use only when debugging (Default: ``False``)
            When used with Earley, it generates a forest graph as "sppf.png", if 'dot' is installed.
    transformer
            Applies the transformer to every parse tree (equivalent to applying it after the parse, but faster)
    propagate_positions
            Propagates (line, column, end_line, end_column) attributes into all tree branches.
            Accepts ``False``, ``True``, or a callable, which will filter which nodes to ignore when propagating.
    maybe_placeholders
            When ``True``, the ``[]`` operator returns ``None`` when not matched.
            When ``False``,  ``[]`` behaves like the ``?`` operator, and returns no value at all.
            (default= ``True``)
    cache
            Cache the results of the Lark grammar analysis, for x2 to x3 faster loading. LALR only for now.

            - When ``False``, does nothing (default)
            - When ``True``, caches to a temporary file in the local directory
            - When given a string, caches to the path pointed by the string
    regex
            When True, uses the ``regex`` module instead of the stdlib ``re``.
    g_regex_flags
            Flags that are applied to all terminals (both regex and strings)
    keep_all_tokens
            Prevent the tree builder from automagically removing "punctuation" tokens (Default: ``False``)
    tree_class
            Lark will produce trees comprised of instances of this class instead of the default ``lark.Tree``.

    **=== Algorithm Options ===**

    parser
            Decides which parser engine to use. Accepts "earley" or "lalr". (Default: "earley").
            (there is also a "cyk" option for legacy)
    lexer
            Decides whether or not to use a lexer stage

            - "auto" (default): Choose for me based on the parser
            - "basic": Use a basic lexer
            - "contextual": Stronger lexer (only works with parser="lalr")
            - "dynamic": Flexible and powerful (only with parser="earley")
            - "dynamic_complete": Same as dynamic, but tries *every* variation of tokenizing possible.
    ambiguity
            Decides how to handle ambiguity in the parse. Only relevant if parser="earley"

            - "resolve": The parser will automatically choose the simplest derivation
              (it chooses consistently: greedy for tokens, non-greedy for rules)
            - "explicit": The parser will return all derivations wrapped in "_ambig" tree nodes (i.e. a forest).
            - "forest": The parser will return the root of the shared packed parse forest.

    **=== Misc. / Domain Specific Options ===**

    postlex
            Lexer post-processing (Default: ``None``) Only works with the basic and contextual lexers.
    priority
            How priorities should be evaluated - "auto", ``None``, "normal", "invert" (Default: "auto")
    lexer_callbacks
            Dictionary of callbacks for the lexer. May alter tokens during lexing. Use with caution.
    use_bytes
            Accept an input of type ``bytes`` instead of ``str``.
    edit_terminals
            A callback for editing the terminals before parse.
    import_paths
            A List of either paths or loader functions to specify from where grammars are imported
    source_path
            Override the source of from where the grammar was loaded. Useful for relative imports and unconventional grammar loading
    **=== End of Options ===**
    """
    if __doc__:
        __doc__ += OPTIONS_DOC


    ##

    ##

    ##

    ##

    ##

    ##

    _defaults: Dict[str, Any] = {
        'debug': False,
        'keep_all_tokens': False,
        'tree_class': None,
        'cache': False,
        'postlex': None,
        'parser': 'earley',
        'lexer': 'auto',
        'transformer': None,
        'start': 'start',
        'priority': 'auto',
        'ambiguity': 'auto',
        'regex': False,
        'propagate_positions': False,
        'lexer_callbacks': {},
        'maybe_placeholders': True,
        'edit_terminals': None,
        'g_regex_flags': 0,
        'use_bytes': False,
        'import_paths': [],
        'source_path': None,
        '_plugins': {},
    }

    def __init__(self, options_dict: Dict[str, Any]) -> None:
        o = dict(options_dict)

        options = {}
        for name, default in self._defaults.items():
            if name in o:
                value = o.pop(name)
                if isinstance(default, bool) and name not in ('cache', 'use_bytes', 'propagate_positions'):
                    value = bool(value)
            else:
                value = default

            options[name] = value

        if isinstance(options['start'], str):
            options['start'] = [options['start']]

        self.__dict__['options'] = options


        assert_config(self.parser, ('earley', 'lalr', 'cyk', None))

        if self.parser == 'earley' and self.transformer:
            raise ConfigurationError('Cannot specify an embedded transformer when using the Earley algorithm. '
                             'Please use your transformer on the resulting parse tree, or use a different algorithm (i.e. LALR)')

        if o:
            raise ConfigurationError("Unknown options: %s" % o.keys())

    def __getattr__(self, name: str) -> Any:
        try:
            return self.__dict__['options'][name]
        except KeyError as e:
            raise AttributeError(e)

    def __setattr__(self, name: str, value: str) -> None:
        assert_config(name, self.options.keys(), "%r isn't a valid option. Expected one of: %s")
        self.options[name] = value

    def serialize(self, memo = None) -> Dict[str, Any]:
        return self.options

    @classmethod
    def deserialize(cls, data: Dict[str, Any], memo: Dict[int, Union[TerminalDef, Rule]]) -> "LarkOptions":
        return cls(data)


##

##

_LOAD_ALLOWED_OPTIONS = {'postlex', 'transformer', 'lexer_callbacks', 'use_bytes', 'debug', 'g_regex_flags', 'regex', 'propagate_positions', 'tree_class', '_plugins'}

_VALID_PRIORITY_OPTIONS = ('auto', 'normal', 'invert', None)
_VALID_AMBIGUITY_OPTIONS = ('auto', 'resolve', 'explicit', 'forest')


_T = TypeVar('_T', bound="Lark")

class Lark(Serialize):
    #--

    source_path: str
    source_grammar: str
    grammar: 'Grammar'
    options: LarkOptions
    lexer: Lexer
    terminals: Collection[TerminalDef]

    def __init__(self, grammar: 'Union[Grammar, str, IO[str]]', **options) -> None:
        self.options = LarkOptions(options)
        re_module: types.ModuleType

        ##

        use_regex = self.options.regex
        if use_regex:
            if _has_regex:
                re_module = regex
            else:
                raise ImportError('`regex` module must be installed if calling `Lark(regex=True)`.')
        else:
            re_module = re

        ##

        if self.options.source_path is None:
            try:
                self.source_path = grammar.name  ##

            except AttributeError:
                self.source_path = '<string>'
        else:
            self.source_path = self.options.source_path

        ##

        try:
            read = grammar.read  ##

        except AttributeError:
            pass
        else:
            grammar = read()

        cache_fn = None
        cache_md5 = None
        if isinstance(grammar, str):
            self.source_grammar = grammar
            if self.options.use_bytes:
                if not isascii(grammar):
                    raise ConfigurationError("Grammar must be ascii only, when use_bytes=True")

            if self.options.cache:
                if self.options.parser != 'lalr':
                    raise ConfigurationError("cache only works with parser='lalr' for now")

                unhashable = ('transformer', 'postlex', 'lexer_callbacks', 'edit_terminals', '_plugins')
                options_str = ''.join(k+str(v) for k, v in options.items() if k not in unhashable)
                from . import __version__
                s = grammar + options_str + __version__ + str(sys.version_info[:2])
                cache_md5 = md5_digest(s)

                if isinstance(self.options.cache, str):
                    cache_fn = self.options.cache
                else:
                    if self.options.cache is not True:
                        raise ConfigurationError("cache argument must be bool or str")

                    try:
                        username = getpass.getuser()
                    except Exception:
                        ##

                        ##

                        ##

                        username = "unknown"

                    cache_fn = tempfile.gettempdir() + "/.lark_cache_%s_%s_%s_%s.tmp" % (username, cache_md5, *sys.version_info[:2])

                old_options = self.options
                try:
                    with FS.open(cache_fn, 'rb') as f:
                        logger.debug('Loading grammar from cache: %s', cache_fn)
                        ##

                        for name in (set(options) - _LOAD_ALLOWED_OPTIONS):
                            del options[name]
                        file_md5 = f.readline().rstrip(b'\n')
                        cached_used_files = pickle.load(f)
                        if file_md5 == cache_md5.encode('utf8') and verify_used_files(cached_used_files):
                            cached_parser_data = pickle.load(f)
                            self._load(cached_parser_data, **options)
                            return
                except FileNotFoundError:
                    ##

                    pass
                except Exception: ##

                    logger.exception("Failed to load Lark from cache: %r. We will try to carry on.", cache_fn)

                    ##

                    ##

                    self.options = old_options


            ##

            self.grammar, used_files = load_grammar(grammar, self.source_path, self.options.import_paths, self.options.keep_all_tokens)
        else:
            assert isinstance(grammar, Grammar)
            self.grammar = grammar


        if self.options.lexer == 'auto':
            if self.options.parser == 'lalr':
                self.options.lexer = 'contextual'
            elif self.options.parser == 'earley':
                if self.options.postlex is not None:
                    logger.info("postlex can't be used with the dynamic lexer, so we use 'basic' instead. "
                                "Consider using lalr with contextual instead of earley")
                    self.options.lexer = 'basic'
                else:
                    self.options.lexer = 'dynamic'
            elif self.options.parser == 'cyk':
                self.options.lexer = 'basic'
            else:
                assert False, self.options.parser
        lexer = self.options.lexer
        if isinstance(lexer, type):
            assert issubclass(lexer, Lexer)     ##

        else:
            assert_config(lexer, ('basic', 'contextual', 'dynamic', 'dynamic_complete'))
            if self.options.postlex is not None and 'dynamic' in lexer:
                raise ConfigurationError("Can't use postlex with a dynamic lexer. Use basic or contextual instead")

        if self.options.ambiguity == 'auto':
            if self.options.parser == 'earley':
                self.options.ambiguity = 'resolve'
        else:
            assert_config(self.options.parser, ('earley', 'cyk'), "%r doesn't support disambiguation. Use one of these parsers instead: %s")

        if self.options.priority == 'auto':
            self.options.priority = 'normal'

        if self.options.priority not in _VALID_PRIORITY_OPTIONS:
            raise ConfigurationError("invalid priority option: %r. Must be one of %r" % (self.options.priority, _VALID_PRIORITY_OPTIONS))
        if self.options.ambiguity not in _VALID_AMBIGUITY_OPTIONS:
            raise ConfigurationError("invalid ambiguity option: %r. Must be one of %r" % (self.options.ambiguity, _VALID_AMBIGUITY_OPTIONS))

        if self.options.parser is None:
            terminals_to_keep = '*'
        elif self.options.postlex is not None:
            terminals_to_keep = set(self.options.postlex.always_accept)
        else:
            terminals_to_keep = set()

        ##

        self.terminals, self.rules, self.ignore_tokens = self.grammar.compile(self.options.start, terminals_to_keep)

        if self.options.edit_terminals:
            for t in self.terminals:
                self.options.edit_terminals(t)

        self._terminals_dict = {t.name: t for t in self.terminals}

        ##

        if self.options.priority == 'invert':
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = -rule.options.priority
            for term in self.terminals:
                term.priority = -term.priority
        ##

        ##

        ##

        elif self.options.priority is None:
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = None
            for term in self.terminals:
                term.priority = 0

        ##

        self.lexer_conf = LexerConf(
                self.terminals, re_module, self.ignore_tokens, self.options.postlex,
                self.options.lexer_callbacks, self.options.g_regex_flags, use_bytes=self.options.use_bytes
            )

        if self.options.parser:
            self.parser = self._build_parser()
        elif lexer:
            self.lexer = self._build_lexer()

        if cache_fn:
            logger.debug('Saving grammar to cache: %s', cache_fn)
            try:
                with FS.open(cache_fn, 'wb') as f:
                    assert cache_md5 is not None
                    f.write(cache_md5.encode('utf8') + b'\n')
                    pickle.dump(used_files, f)
                    self.save(f, _LOAD_ALLOWED_OPTIONS)
            except IOError as e:
                logger.exception("Failed to save Lark to cache: %r.", cache_fn, e)

    if __doc__:
        __doc__ += "\n\n" + LarkOptions.OPTIONS_DOC

    __serialize_fields__ = 'parser', 'rules', 'options'

    def _build_lexer(self, dont_ignore: bool=False) -> BasicLexer:
        lexer_conf = self.lexer_conf
        if dont_ignore:
            from copy import copy
            lexer_conf = copy(lexer_conf)
            lexer_conf.ignore = ()
        return BasicLexer(lexer_conf)

    def _prepare_callbacks(self) -> None:
        self._callbacks = {}
        ##

        if self.options.ambiguity != 'forest':
            self._parse_tree_builder = ParseTreeBuilder(
                    self.rules,
                    self.options.tree_class or Tree,
                    self.options.propagate_positions,
                    self.options.parser != 'lalr' and self.options.ambiguity == 'explicit',
                    self.options.maybe_placeholders
                )
            self._callbacks = self._parse_tree_builder.create_callback(self.options.transformer)
        self._callbacks.update(_get_lexer_callbacks(self.options.transformer, self.terminals))

    def _build_parser(self) -> "ParsingFrontend":
        self._prepare_callbacks()
        _validate_frontend_args(self.options.parser, self.options.lexer)
        parser_conf = ParserConf(self.rules, self._callbacks, self.options.start)
        return _construct_parsing_frontend(
            self.options.parser,
            self.options.lexer,
            self.lexer_conf,
            parser_conf,
            options=self.options
        )

    def save(self, f, exclude_options: Collection[str] = ()) -> None:
        #--
        data, m = self.memo_serialize([TerminalDef, Rule])
        if exclude_options:
            data["options"] = {n: v for n, v in data["options"].items() if n not in exclude_options}
        pickle.dump({'data': data, 'memo': m}, f, protocol=pickle.HIGHEST_PROTOCOL)

    @classmethod
    def load(cls: Type[_T], f) -> _T:
        #--
        inst = cls.__new__(cls)
        return inst._load(f)

    def _deserialize_lexer_conf(self, data: Dict[str, Any], memo: Dict[int, Union[TerminalDef, Rule]], options: LarkOptions) -> LexerConf:
        lexer_conf = LexerConf.deserialize(data['lexer_conf'], memo)
        lexer_conf.callbacks = options.lexer_callbacks or {}
        lexer_conf.re_module = regex if options.regex else re
        lexer_conf.use_bytes = options.use_bytes
        lexer_conf.g_regex_flags = options.g_regex_flags
        lexer_conf.skip_validation = True
        lexer_conf.postlex = options.postlex
        return lexer_conf

    def _load(self: _T, f: Any, **kwargs) -> _T:
        if isinstance(f, dict):
            d = f
        else:
            d = pickle.load(f)
        memo_json = d['memo']
        data = d['data']

        assert memo_json
        memo = SerializeMemoizer.deserialize(memo_json, {'Rule': Rule, 'TerminalDef': TerminalDef}, {})
        options = dict(data['options'])
        if (set(kwargs) - _LOAD_ALLOWED_OPTIONS) & set(LarkOptions._defaults):
            raise ConfigurationError("Some options are not allowed when loading a Parser: {}"
                             .format(set(kwargs) - _LOAD_ALLOWED_OPTIONS))
        options.update(kwargs)
        self.options = LarkOptions.deserialize(options, memo)
        self.rules = [Rule.deserialize(r, memo) for r in data['rules']]
        self.source_path = '<deserialized>'
        _validate_frontend_args(self.options.parser, self.options.lexer)
        self.lexer_conf = self._deserialize_lexer_conf(data['parser'], memo, self.options)
        self.terminals = self.lexer_conf.terminals
        self._prepare_callbacks()
        self._terminals_dict = {t.name: t for t in self.terminals}
        self.parser = _deserialize_parsing_frontend(
            data['parser'],
            memo,
            self.lexer_conf,
            self._callbacks,
            self.options,  ##

        )
        return self

    @classmethod
    def _load_from_dict(cls, data, memo, **kwargs):
        inst = cls.__new__(cls)
        return inst._load({'data': data, 'memo': memo}, **kwargs)

    @classmethod
    def open(cls: Type[_T], grammar_filename: str, rel_to: Optional[str]=None, **options) -> _T:
        #--
        if rel_to:
            basepath = os.path.dirname(rel_to)
            grammar_filename = os.path.join(basepath, grammar_filename)
        with open(grammar_filename, encoding='utf8') as f:
            return cls(f, **options)

    @classmethod
    def open_from_package(cls: Type[_T], package: str, grammar_path: str, search_paths: 'Sequence[str]'=[""], **options) -> _T:
        #--
        package_loader = FromPackageLoader(package, search_paths)
        full_path, text = package_loader(None, grammar_path)
        options.setdefault('source_path', full_path)
        options.setdefault('import_paths', [])
        options['import_paths'].append(package_loader)
        return cls(text, **options)

    def __repr__(self):
        return 'Lark(open(%r), parser=%r, lexer=%r, ...)' % (self.source_path, self.options.parser, self.options.lexer)


    def lex(self, text: str, dont_ignore: bool=False) -> Iterator[Token]:
        #--
        lexer: Lexer
        if not hasattr(self, 'lexer') or dont_ignore:
            lexer = self._build_lexer(dont_ignore)
        else:
            lexer = self.lexer
        lexer_thread = LexerThread.from_text(lexer, text)
        stream = lexer_thread.lex(None)
        if self.options.postlex:
            return self.options.postlex.process(stream)
        return stream

    def get_terminal(self, name: str) -> TerminalDef:
        #--
        return self._terminals_dict[name]

    def parse_interactive(self, text: Optional[str]=None, start: Optional[str]=None) -> 'InteractiveParser':
        #--
        return self.parser.parse_interactive(text, start=start)

    def parse(self, text: str, start: Optional[str]=None, on_error: 'Optional[Callable[[UnexpectedInput], bool]]'=None) -> 'ParseTree':
        #--
        return self.parser.parse(text, start=start, on_error=on_error)




class DedentError(LarkError):
    pass

class Indenter(PostLex, ABC):
    paren_level: int
    indent_level: List[int]

    def __init__(self) -> None:
        self.paren_level = 0
        self.indent_level = [0]
        assert self.tab_len > 0

    def handle_NL(self, token: Token) -> Iterator[Token]:
        if self.paren_level > 0:
            return

        yield token

        indent_str = token.rsplit('\n', 1)[1] ##

        indent = indent_str.count(' ') + indent_str.count('\t') * self.tab_len

        if indent > self.indent_level[-1]:
            self.indent_level.append(indent)
            yield Token.new_borrow_pos(self.INDENT_type, indent_str, token)
        else:
            while indent < self.indent_level[-1]:
                self.indent_level.pop()
                yield Token.new_borrow_pos(self.DEDENT_type, indent_str, token)

            if indent != self.indent_level[-1]:
                raise DedentError('Unexpected dedent to column %s. Expected dedent to %s' % (indent, self.indent_level[-1]))

    def _process(self, stream):
        for token in stream:
            if token.type == self.NL_type:
                yield from self.handle_NL(token)
            else:
                yield token

            if token.type in self.OPEN_PAREN_types:
                self.paren_level += 1
            elif token.type in self.CLOSE_PAREN_types:
                self.paren_level -= 1
                assert self.paren_level >= 0

        while len(self.indent_level) > 1:
            self.indent_level.pop()
            yield Token(self.DEDENT_type, '')

        assert self.indent_level == [0], self.indent_level

    def process(self, stream):
        self.paren_level = 0
        self.indent_level = [0]
        return self._process(stream)

    ##

    @property
    def always_accept(self):
        return (self.NL_type,)

    @property
    @abstractmethod
    def NL_type(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def OPEN_PAREN_types(self) -> List[str]:
        raise NotImplementedError()

    @property
    @abstractmethod
    def CLOSE_PAREN_types(self) -> List[str]:
        raise NotImplementedError()

    @property
    @abstractmethod
    def INDENT_type(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def DEDENT_type(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def tab_len(self) -> int:
        raise NotImplementedError()


class PythonIndenter(Indenter):
    NL_type = '_NEWLINE'
    OPEN_PAREN_types = ['LPAR', 'LSQB', 'LBRACE']
    CLOSE_PAREN_types = ['RPAR', 'RSQB', 'RBRACE']
    INDENT_type = '_INDENT'
    DEDENT_type = '_DEDENT'
    tab_len = 8


import pickle, zlib, base64
DATA = (
b''
)
DATA = pickle.loads(zlib.decompress(base64.b64decode(DATA)))
MEMO = (
b'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'
)
MEMO = pickle.loads(zlib.decompress(base64.b64decode(MEMO)))
Shift = 0
Reduce = 1
def Lark_StandAlone(**kwargs):
  return Lark._load_from_dict(DATA, MEMO, **kwargs)
